"""

Machine Learning techniques to increase profitability. 

NTTData x Luiss

Martina Manno, Martina Crisafulli, Olimpia Sannucci, Hanna Carucci Viterbi, Tomas Ryen

"""



# Import libraries

IMPORT numpy as np

IMPORT pandas as pd

IMPORT matplotlib.pyplot as plt

IMPORT seaborn as sns

IMPORT datetime as dt

IMPORT seaborn as sns

from collections IMPORT Counter

IMPORT os

IMPORT plotly.express as px

from functools IMPORT reduce

from sklearn.preprocessing IMPORT StandardScaler

from sklearn.cluster IMPORT KMeans

IMPORT squarify



# Load the dataset, corresponding to the final of the clustering script

SET df TO pd.read_csv("python_merged.csv", index_col=0)

df.dropna(inplace=True)



# Data cleaning and management

SET products_bought TO df.groupby(['customer_unique_id']).agg({'order_item_sequence_id':'sum',

                                                          'product_category_name':'count',

                                                          'price':'sum','transaction_value':'sum',

                                                          'shipping_cost':'sum', 'review_score':'mean', 

                                                          'ts_order_purchase':'max', 'order_id':'count'}).reset_index()

SET all_data TO products_bought.sort_values(by TO ['product_category_name'], ascending=False)

# Firstly, an RFM analysis was driven in order to segment customers according to:
Recency: How recent was the customer’s last purchase? Customers who recently made a purchase will still have the product on their minds and are more likely to purchase or use the product again.
Frequency: How often did a customer make a purchase in a given period? Customers who purchased once are often more likely to purchase again. Additionally, first-time customers may be good targets for follow-up advertising to convert them into more frequent customers. 
Monetary: How much money did the customer spend in a given period? Customers who spend a lot of money are more likely to spend money in the future and have a high value to a business.
Recency and Frequency were computed as follows:


# Data cleaning and addition of recency and frequency to the dataset 

SET all_data TO all_data.rename(columns={"product_category_name": "amount_prod_categories"})

SET all_data['ts_order_purchase'] TO pd.to_datetime(all_data['ts_order_purchase'])

SET all_data['today'] TO all_data['ts_order_purchase'].max()

SET all_data['recency'] TO all_data['today'] - all_data['ts_order_purchase']

SET all_data['recency'] TO all_data['recency'].dt.days

all_data.drop(['ts_order_purchase','today'], inplace= True, axis=1)

SET all_data TO all_data.rename(columns={"order_id": "frequency"})



# Plotting Recency

plt.figure(figsize=(18, 4))

sns.distplot(all_data['recency'])



plt.xlabel('Days since the last order')

plt.title('Recency',fontsize=16);

plt.show()



# Plotting Frequency

plt.figure(figsize=(15, 3))

sns.distplot(all_data['frequency'], kde=False);



plt.xlabel('Number of orders')

plt.title('Frequency',fontsize=16);

plt.show()

OUTPUT(all_data['frequency'].value_counts())



# Plotting Monetary

plt.figure(figsize=(15, 3))

sns.distplot(all_data['transaction_value']);



plt.xlabel('Total purchase value')

plt.title('Monetary', fontsize=16);

plt.show()



# Compute ratings FOR each product category

SET rating_count TO (df.groupby(by TO ['product_category_name'])['review_score'].mean().reset_index().rename(columns TO {'review_score':'review_count'})[['product_category_name','review_count']])



# sort products by review, from highest to lowest

SET product_rew TO rating_count.sort_values(by=['review_count'], ascending=False)

SET best_products TO product_rew[:10]

SET best_products TO best_products[['product_category_name','review_count']]

best_products[:10]



# Plotting the best categories FOR review score

SET prodnote_hist TO sns.barplot(y TO best_products["product_category_name"], x TO best_products["review_count"], palette TO "BrBG_r");

sns.set_context("talk")

sns.set_style("whitegrid")

SET sns.set(rc TO {'figure.figsize':(10,8)})

SET plt.title('Best 10 product categories FOR review score', fontsize TO 16)

SET plt.xlabel('Product category avarage review score', fontsize TO 14)

SET plt.ylabel('Product category', fontsize TO 14)

plt.savefig('best10productreviw.png')



# ### RFM ANALYSIS



# Select data FOR RFM analysis

SET df_RFM TO all_data[['customer_unique_id', 'frequency', 'recency', 'transaction_value']]

SET df_RFM TO df_RFM.reset_index(drop=True)

df_RFM.head()



# computation of quantiles for recency, frequency and monetary

SET quintiles TO df_RFM[['recency', 'frequency', 'transaction_value']].quantile([.2, .4, .6, .8]).to_dict()



# Defining functions FOR R score and FM score. The r_score and f m_score were defined with the following function:

CALL #F DEFINE FUNCTION r_score(x):

    IF x <= quintiles['recency'][.2]:

        RETURN 5

    ELSEIF x <= quintiles['recency'][.4]:

        RETURN 4

    ELSEIF x <= quintiles['recency'][.6]:

        RETURN 3

    ELSEIF x <= quintiles['recency'][.8]:

        RETURN 2

    ELSE:

        RETURN 1

    

CALL #F DEFINE FUNCTION fm_score(x, c):

    IF x <= quintiles[c][.2]:

        RETURN 1

    ELSEIF x <= quintiles[c][.4]:

        RETURN 2

    ELSEIF x <= quintiles[c][.6]:

        RETURN 3

    ELSEIF x <= quintiles[c][.8]:

        RETURN 4

    ELSE:

        RETURN 5   



# Computation of the R, F and M values. And finally the dataset of the RFM is created with respectively the values about recency (R), frequency (F) and monetary (M).

SET df_RFM['R'] TO df_RFM['recency'].apply(lambda x: r_score(x))

SET df_RFM['F'] TO df_RFM['frequency'].apply(lambda x: fm_score(x, 'frequency'))

SET df_RFM['M'] TO df_RFM['transaction_value'].apply(lambda x: fm_score(x, 'transaction_value'))

SET df_RFM['RFM Score'] TO df_RFM['R'].map(str) + df_RFM['F'].map(str) + df_RFM['M'].map(str)



# Segments

# One time buyers: low recency, low frequency 

# About to Sleep: low recency, high frequency: the ones that made some purchases but are not active anymore

# Potential Loyalist: high recency, low frequency: new customers who recently made a purchase and might become loyal customers

# Loyal Customers: medium recency, high frequency: we eant them to become Champions

# Champions: high recency, high frequency; higest score 

# Strangers: medium recency, low frequency



# Build a segmentation map. Once the dataset was ready, the different categories of customers have been defined:

SET segm1_map TO {

    r'[1-2]1': 'One Time',

    r'[1-2][4-5]': 'About to Sleep',

    r'5[1-2]': 'Potential Loyalist',

    r'[3-4]5': 'Loyal Customers',

    r'[4-5]5': 'Champions',

    r'[3-4][1-3]': 'Strangers'

}


SET df_RFM['Segment1'] TO df_RFM['R'].map(str) + df_RFM['F'].map(str)

SET df_RFM['Segment1'] TO df_RFM['Segment1'].replace(segm1_map, regex=True)

SET all_data['R'] TO all_data['recency'].apply(lambda x: r_score(x))

SET all_data['F'] TO all_data['frequency'].apply(lambda x: fm_score(x, 'frequency'))

SET all_data['M'] TO all_data['transaction_value'].apply(lambda x: fm_score(x, 'transaction_value'))

SET all_data['RFM Score'] TO all_data['R'].map(str) + all_data['F'].map(str) + all_data['M'].map(str)

SET all_data['Segment1'] TO all_data['R'].map(str) + all_data['F'].map(str)

SET all_data['Segment1'] TO all_data['Segment1'].replace(segm1_map, regex=True)


# At Risk: both recency and frequency are low. This customers are at risk of leaving and it might be good starting to consider the idea of actually losing them, and rather focus the attention and resources on the customers that might get close to the company.
# About to Sleep: customers with low recency but high frequency; those who made some purchases but are not active anymore They might be activated with alerts as for example new discounts and contacting them directly.
# Potential Loyalists: here the recency is high but the frequency low; new customers who recently made a purchase and might become loyal customers. As for ths, they must be treated well with, for example, vouchers.
# Champions: High recency, high frequency and highest score. Champions are the best customers and as for this they must be gratified through thank you cards, early access to new collections. In other words, they must be taken care of.
# Strangers: Those customers with mild values of recency and low frequency





# All spenders

# Segments classified according to how much they spend

SET segment1s_counts TO df_RFM['Segment1'].value_counts().sort_values(ascending=True)



SET fig, ax TO plt.subplots()



SET bars TO ax.barh(range(len(segment1s_counts)),

              segment1s_counts,

              color='cornflowerblue')

ax.set_frame_on(False)

ax.tick_params(left=False,

               bottom=False,

               labelbottom=False)

ax.set_yticks(range(len(segment1s_counts)))

SET ax.set_yticklabels(segment1s_counts.index,  fontsize TO 14)



FOR i, bar IN enumerate(bars):

        SET value TO bar.get_width()

        ax.text(value,

                bar.get_y() + bar.get_height()/2,

                ' {:,} ({:}%)'.format(int(value),

                                   int(value*100/segment1s_counts.sum())),

                va='center',

                ha='left'

               )

sns.set(rc={'figure.figsize':(5,10)})

plt.savefig('rfm_segments.png')





# Low spenders



# Plot FOR low-spending people

SET low_spenders TO df_RFM[df_RFM['M'] <= 2]

SET low_spenders['Segment_big'] TO low_spenders['R'].map(str) + low_spenders['F'].map(str)

SET low_spenders['Segment_big'] TO low_spenders['Segment_big'].replace(segm1_map, regex=True)



SET segment1s_counts TO low_spenders['Segment_big'].value_counts().sort_values(ascending=True)



SET fig, ax TO plt.subplots()



SET bars TO ax.barh(range(len(segment1s_counts)),

              segment1s_counts,

              color='b')

ax.set_frame_on(False)

ax.tick_params(left=False,

               bottom=False,

               labelbottom=False)

ax.set_yticks(range(len(segment1s_counts)))

SET ax.set_yticklabels(segment1s_counts.index,  fontsize TO 14)



FOR i, bar IN enumerate(bars):

        SET value TO bar.get_width()

        ax.text(value,

                bar.get_y() + bar.get_height()/2,

                ' {:,} ({:}%)'.format(int(value),

                                   int(value*100/segment1s_counts.sum())),

                va='center',

                ha='left'

               )

sns.set(rc={'figure.figsize':(5,10)})

plt.show()





# Average spenders

# Plot FOR average-spending people



SET avg_spenders TO df_RFM[df_RFM['M'] EQUALS 3]

SET avg_spenders['Segment_big'] TO avg_spenders['R'].map(str) + avg_spenders['F'].map(str)

SET avg_spenders['Segment_big'] TO avg_spenders['Segment_big'].replace(segm1_map, regex=True)



SET segment1s_counts TO avg_spenders['Segment_big'].value_counts().sort_values(ascending=True)



SET fig, ax TO plt.subplots()



SET bars TO ax.barh(range(len(segment1s_counts)),

              segment1s_counts,

              color='g')

ax.set_frame_on(False)

ax.tick_params(left=False,

               bottom=False,

               labelbottom=False)

ax.set_yticks(range(len(segment1s_counts)))

SET ax.set_yticklabels(segment1s_counts.index,  fontsize TO 14)



FOR i, bar IN enumerate(bars):

        SET value TO bar.get_width()

        ax.text(value,

                bar.get_y() + bar.get_height()/2,

                ' {:,} ({:}%)'.format(int(value),

                                   int(value*100/segment1s_counts.sum())),

                va='center',

                ha='left'

               )

SET sns.set(rc TO {'figure.figsize':(5,10)})

plt.show()





# High spenders



# Plot FOR high-spending people

SET high_spenders TO df_RFM[df_RFM['M'] >= 4]

OUTPUT(len(high_spenders))



SET high_spenders['Segment_big'] TO high_spenders['R'].map(str) + high_spenders['F'].map(str)

SET high_spenders['Segment_big'] TO high_spenders['Segment_big'].replace(segm1_map, regex=True)



SET segment1s_counts TO high_spenders['Segment_big'].value_counts().sort_values(ascending=True)



SET fig, ax TO plt.subplots()



SET bars TO ax.barh(range(len(segment1s_counts)),

              segment1s_counts,

              SET color TO 'r')

ax.set_frame_on(False)

SET ax.tick_params(left TO False,

               SET bottom TO False,

               SET labelbottom TO False)

ax.set_yticks(range(len(segment1s_counts)))

SET ax.set_yticklabels(segment1s_counts.index,  fontsize TO 14)



FOR i, bar IN enumerate(bars):

        SET value TO bar.get_width()

        ax.text(value,

                bar.get_y() + bar.get_height()/2,

                ' {:,} ({:}%)'.format(int(value),

                                   int(value*100/segment1s_counts.sum())),

                SET va TO 'center',

                SET ha TO 'left'

               )

SET sns.set(rc TO {'figure.figsize':(5,10)})

plt.show()





# Values FOR each Segment



# Group customers by segments

SET df_rfm2 TO df_RFM.groupby('Segment1').agg(RecencyMean TO ('recency', 'mean'),

                                          SET FrequencyMean TO ('frequency', 'mean'),

                                          SET MonetaryMean TO ('transaction_value', 'mean'),

                                          SET GroupSize TO ('recency', 'size'))



# Plot of segments size

SET font TO {'family' : 'Dejavu Sans',

        'weight' : 'normal',

        'size'   : 18}



plt.rc('font', **font)





SET fig TO plt.gcf()

SET ax TO fig.add_subplot()

fig.set_size_inches(15, 10)

SET squarify.plot(sizes TO df_rfm2['GroupSize'], 

              SET label TO df_rfm2.index,

              SET color TO ['blue','firebrick', 'tomato', 'teal', 'olive', 'gold'],

              SET alpha TO 0.5)

plt.title("RFM Segments",fontsize=18,fontweight="bold")

plt.axis('off')

plt.savefig('rfm_square.png')



# Best 10 products FOR review score

SET prodnote_hist TO sns.barplot( y=best_products["product_category_name"], x=best_products["review_count"],palette TO "BuPu_r");

sns.set_context("talk")

sns.set_style("whitegrid")

SET sns.set(rc TO {'figure.figsize':(10,8)})

SET plt.title('Best 10 product categories FOR review score', fontsize TO 16)

SET plt.xlabel('Product category avarage review score', fontsize TO 14)

SET plt.ylabel('Product category', fontsize TO 14)

plt.savefig('best10product per review.png')



# 10 mosr ordered product categories

SET prodcat TO df.groupby(['product_category_name']).sum().reset_index() 

SET prodcat TO prodcat[prodcat['product_category_name'] != 'None']

SET prodcat TO prodcat.sort_values(by=['order_item_sequence_id'], ascending=False)

SET prodcat0 TO prodcat[:10]

sns.set_context("talk")

sns.set_style("white")

sns.set(rc={'figure.figsize':(10,8)})

SET catorderhist TO sns.barplot( y=prodcat0["product_category_name"], x=prodcat0["order_item_sequence_id"] ,palette TO 'YlGn_r');

SET plt.title('10 most ordered product categories', fontsize TO 16)

SET plt.xlabel('Product category', fontsize TO 14)

SET plt.ylabel('Ammount of orders per category', fontsize TO 14)

plt.savefig('10 most ordered product categories.png' )



# Number of customers by region

SET plt.figure(figsize TO (10,5))

plt.title('Customers Per Region')

plt.ylabel('Regions')

plt.xlabel('Number of customers')

SET sns.barplot(y TO df['customer_autonomous_community'].value_counts().index,

            SET x TO df['customer_autonomous_community'].value_counts().values, palette TO 'cool_r')

SET plt.xticks(rotation TO 90)

plt.savefig('customers per region.png')





# Time Data Managing



# We will work only with the orders with status EQUALS delivered

data__orders=df.loc[df['order_status'] EQUALS 'delivered']

SET data__orders['ts_order_purchase'] TO pd.to_datetime(data__orders['ts_order_purchase'])

SET data__orders['ts_order_estimated_delivery'] TO pd.to_datetime(data__orders['ts_order_estimated_delivery'])

SET data__orders['ts_order_delivered_customer'] TO pd.to_datetime(data__orders['ts_order_delivered_customer'])

SET data__orders['dif_exp_delivery'] TO ((data__orders['ts_order_estimated_delivery'])-(data__orders['ts_order_delivered_customer'])).dt.days

data__orders['dif_exp_delivery'].fillna(0,inplace=True)

SET data__orders.dropna(inplace TO True)

SET data__orders['dif_exp_delivery'] TO data__orders['dif_exp_delivery'].astype('int64')



# New Columns to add to the dataset

SET data__orders['year_purch'] TO data__orders['ts_order_purchase'].dt.year

SET data__orders['month_purch'] TO data__orders['ts_order_purchase'].dt.month

SET data__orders['day_purch'] TO data__orders['ts_order_purchase'].dt.day

SET data__orders['week_day'] TO data__orders['ts_order_purchase'].dt.weekday



# Assign a number FOR each day of the week

SET day_name TO []

FOR d IN data__orders.week_day:

    IF d EQUALS 6:

        SET d TO 'Sun'

    ELSEIF d EQUALS 0:

        SET d TO 'Mon'

    ELSEIF d EQUALS 1:

        SET d TO 'Tue'

    ELSEIF d EQUALS 2:

        SET d TO 'Wed'

    ELSEIF d EQUALS 3:

        SET d TO 'Thur'

    ELSEIF d EQUALS 4:

        SET d TO 'Fri'

    ELSE:

        SET d TO 'Sat'

    day_name.append(d)

SET data__orders['week_day'] TO day_name



# Convert to datetime and compute difference between estimate and actual delivery

SET data__orders['ts_order_purchase'] TO pd.to_datetime(data__orders['ts_order_purchase'])

SET data__orders['ts_order_estimated_delivery'] TO pd.to_datetime(data__orders['ts_order_estimated_delivery'])

SET data__orders['ts_order_delivered_customer'] TO pd.to_datetime(data__orders['ts_order_delivered_customer'])

data__orders['dif_exp_delivery']=((data__orders['ts_order_estimated_delivery'])-(data__orders['ts_order_delivered_customer'])).dt.days



# Time data modifications

SET data__orders['ts_order_purchase'] TO pd.to_datetime(data__orders['ts_order_purchase'])

SET data__orders['ts_order_purchase'] TO data__orders['ts_order_purchase'].dt.date

SET data__orders['hour_purch'] TO data__orders['ts_order_purchase'].dt.round('360min')

SET data__orders['hour_purch'] TO pd.to_datetime(data__orders['hour_purch'])

SET data__orders['hour_purch'] TO data__orders['hour_purch'].dt.time

SET data__orders['hour_purch'] TO data__orders['ts_order_purchase'].dt.round('360min')

SET data__orders['month_year_purch'] TO data__orders['ts_order_purchase'].dt.strftime('%m-%Y')

SET data__orders.drop(['ts_order_purchase'],axis TO 1, inplace=True)



#Drop some data we will not use

"""data__orders.drop(['ts_order_approved'],axis=1,inplace=True)

data__orders.drop(['ts_order_delivered_carrier'],axis=1,inplace=True)

data__orders.drop(['ts_order_delivered_customer'],axis=1,inplace=True)

data__orders.drop(['ts_order_estimated_delivery'],axis=1,inplace=True)

df.drop(['product_name_lenght'],axis=1,inplace=True)

df.drop(['product_photos_quantity'],axis=1,inplace=True)

df.drop(['product_description_lenght'],axis=1,inplace=True)

df.drop(['product_weight_gr'],axis=1,inplace=True)

df.drop(['product_length_cm'],axis=1,inplace=True)

df.drop(['product_height_cm'],axis=1,inplace=True)

df.drop(['product_width_cm'],axis=1,inplace=True)"""



# Data without the dropped columns

SET filtro  TO data__orders['month_purch'].isin([1,2,3,4,5,6,7,8])

data_aux= data__orders[filtro]

data__orders.to_csv('data__orders.csv')



# Distribution of purchases per year

plt.figure(figsize=(20,7))

plt.subplot(111)

SET year_seasonality TO data__orders.groupby(['year_purch'])['order_id'].nunique().sort_values(ascending=True).reset_index()

total=len(data__orders)

SET g TO sns.barplot(x='year_purch', y='order_id', data=year_seasonality, palette='Set2')

g.set_title("Distribution of purchases per year", fontsize=20)

g.set_xlabel("Year", fontsize=17)

g.set_ylabel("Purchases quantity", fontsize=17)

SET sizes TO []

FOR p IN g.patches:

    SET height TO p.get_height()

    sizes.append(height)

    g.text(p.get_x()+p.get_width()/2.,

            height + 3,

            '{:1.2f}%'.format(height/total*100),

            ha="center", fontsize=14) 

g.set_ylim(0, max(sizes) * 1.1)

plt.savefig('distribution purchases per year.png')



# Distribution of purchases during the week

plt.figure(figsize=(15,7))

SET weekle_seasonality TO data__orders.groupby(['week_day'])['order_id'].nunique().sort_values(ascending=False).reset_index()

SET sns.barplot(x='week_day',y='order_id', data=weekle_seasonality, palette TO 'Set3')

plt.title("Distirbution of purchases during the week", fontsize=20)

plt.xlabel('day of the week')

plt.ylabel('Order quantity')

plt.savefig('distr purchases during week.png')

